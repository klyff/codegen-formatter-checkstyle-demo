/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20). https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */

package br.com.zup.dtp.api.restclient;

import br.com.zup.dtp.api.dto.LanguageDTO;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
import java.util.List;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

@Api(value = "Language", description = "the Language API")
public interface LanguageApi {

   @ApiOperation(value = "Add a new programming language to list", nickname = "addLanguage", notes = "",
       authorizations = {
           @Authorization(value = "language_auth",
               scopes = { @AuthorizationScope(scope = "write:languages", description = "modify programming languages in your account"),
                          @AuthorizationScope(scope = "read:languages", description = "read your programming languages") }) },
       tags = { "language", })
   @ApiResponses(value = { @ApiResponse(code = 405, message = "Invalid input") })
   @RequestMapping(value = "/language", consumes = "application/json", method = RequestMethod.POST)
   ResponseEntity<Void>
   addLanguage(@ApiParam(value = "Programming Language Object to be added", required = true) @Valid @RequestBody LanguageDTO body);

   @ApiOperation(value = "Finds Pets Creation Date", nickname = "findByYear",
       notes = "Multiple status values can be provided with comma separated strings", response = LanguageDTO.class, responseContainer = "List",
       authorizations = {
           @Authorization(value = "language_auth",
               scopes = { @AuthorizationScope(scope = "write:languages", description = "modify programming languages in your account"),
                          @AuthorizationScope(scope = "read:languages", description = "read your programming languages") }) },
       tags = { "language", })
   @ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = LanguageDTO.class, responseContainer = "List"),
                           @ApiResponse(code = 400, message = "Invalid year value") })
   @RequestMapping(value = "/language/findByYear", produces = "application/json", method = RequestMethod.GET)
   ResponseEntity<List<LanguageDTO>> findByYear(@NotNull @ApiParam(value = "Year value that need to be considered for filter",
       required = true) @Valid @RequestParam(value = "year", required = true) String year);

   @ApiOperation(value = "Update an existing Language", nickname = "updateLanguage", notes = "",
       authorizations = {
           @Authorization(value = "language_auth",
               scopes = { @AuthorizationScope(scope = "write:languages", description = "modify programming languages in your account"),
                          @AuthorizationScope(scope = "read:languages", description = "read your programming languages") }) },
       tags = { "language", })
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid Name or Creator"), @ApiResponse(code = 404, message = "Language not found"),
                           @ApiResponse(code = 405, message = "Validation exception") })
   @RequestMapping(value = "/language", consumes = "application/json", method = RequestMethod.PUT)
   ResponseEntity<Void> updateLanguage(
       @ApiParam(value = "Language object that needs to be added to the list", required = true) @Valid @RequestBody LanguageDTO body);

}
